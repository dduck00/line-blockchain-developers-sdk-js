"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const test_data_1 = require("./test-data");
const tx_result_adapters_1 = require("../lib/tx-result-adapters");
const tx_core_models_1 = require("../lib/tx-core-models");
(0, mocha_1.describe)("lbd-tx-event-adapter test", () => {
    let adapter = new tx_result_adapters_1.LbdTxEventsAdapterV1();
    // account
    (0, mocha_1.it)("with createAccountTxResult", () => {
        let inputTxResultResponse = test_data_1.createAccountTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventAccountCreated.name).to.equal(event.constructor.name);
        let eventAccountCreated = event;
        (0, chai_1.expect)(0, eventAccountCreated.msgIndex);
        (0, chai_1.expect)("link16p22ehyh478fjjwc49pcm5srn2fxaezfsf25gd").to.equals(eventAccountCreated.createdAddress);
        (0, chai_1.expect)(0).to.equals(eventAccountCreated.msgIndex);
        (0, chai_1.expect)("EventAccountCreated").to.equals(eventAccountCreated.eventName);
    });
    (0, mocha_1.it)("with accountMsgEmptyTxResult", () => {
        let inputTxResultResponse = test_data_1.accountMsgEmptyTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventEmptyMsgCreated.name).to.equal(event.constructor.name);
        let eventEmptyMsgCreated = event;
        (0, chai_1.expect)(0).to.equal(eventEmptyMsgCreated.msgIndex);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equals(eventEmptyMsgCreated.senderAddress);
        (0, chai_1.expect)("EventEmptyMsgCreated").to.equals(eventEmptyMsgCreated.eventName);
    });
    // coin
    (0, mocha_1.it)("with baseCoinTransferTxResult", () => {
        let inputTxResultResponse = test_data_1.baseCoinTransferTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCoinTransferred.name).to.equal(event.constructor.name);
        let eventCoinTransferred = event;
        (0, chai_1.expect)(0).to.equal(eventCoinTransferred.msgIndex);
        (0, chai_1.expect)("tcony").to.equals(eventCoinTransferred.denomination);
        (0, chai_1.expect)("1").to.equals(eventCoinTransferred.amount);
        (0, chai_1.expect)(0).to.equals(eventCoinTransferred.msgIndex);
        (0, chai_1.expect)("EventCoinTransferred").to.equals(eventCoinTransferred.eventName);
    });
    // token
    (0, mocha_1.it)("with issueServiceTokenTxResult", () => {
        let inputTxResultResponse = test_data_1.issueServiceTokenTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventTokenIssued.name).to.equal(event.constructor.name);
        let eventTokenIssued = event;
        (0, chai_1.expect)(0).to.equal(eventTokenIssued.msgIndex);
        (0, chai_1.expect)("Gamja").to.equal(eventTokenIssued.name);
        (0, chai_1.expect)("987654321").to.equal(eventTokenIssued.amount);
        (0, chai_1.expect)("9be17165").to.equal(eventTokenIssued.contractId);
        (0, chai_1.expect)("GAMJA").to.equal(eventTokenIssued.symbol);
        (0, chai_1.expect)("tlink1n9pqyk4jy8d3pd20quryudxw3g47cl99403558").to.equal(eventTokenIssued.issuerAddress);
        (0, chai_1.expect)("tlink1n9pqyk4jy8d3pd20quryudxw3g47cl99403558").to.equal(eventTokenIssued.receiverAddress);
        (0, chai_1.expect)(6).to.equal(eventTokenIssued.decimals);
        (0, chai_1.expect)(0).to.equal(eventTokenIssued.msgIndex);
        (0, chai_1.expect)("EventTokenIssued").to.equal(eventTokenIssued.eventName);
    });
    (0, mocha_1.it)("with serviceTokenMintTxResult", () => {
        let inputTxResultResponse = test_data_1.serviceTokenMintTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventTokenMinted.name).to.equal(event.constructor.name);
        let eventTokenMinted = event;
        (0, chai_1.expect)(0).to.equal(eventTokenMinted.msgIndex);
        (0, chai_1.expect)("1000").to.equal(eventTokenMinted.amount);
        (0, chai_1.expect)("9636a07e").to.equal(eventTokenMinted.contractId);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventTokenMinted.minterAddress);
        (0, chai_1.expect)("tlink1nf5uhdmtsshmkqvlmq45kn4q9atnkx4l3u4rww").to.equal(eventTokenMinted.toAddress);
        (0, chai_1.expect)(0).to.equal(eventTokenMinted.msgIndex);
        (0, chai_1.expect)("EventTokenMinted").to.equal(eventTokenMinted.eventName);
    });
    (0, mocha_1.it)("with serviceTokenBurnTxResult", () => {
        let inputTxResultResponse = test_data_1.serviceTokenBurnTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventTokenBurned.name).to.equal(event.constructor.name);
        let eventTokenBurned = event;
        (0, chai_1.expect)(0).to.equal(eventTokenBurned.msgIndex);
        (0, chai_1.expect)("9be17165").to.equal(eventTokenBurned.contractId);
        (0, chai_1.expect)("1000").to.equal(eventTokenBurned.amount);
        (0, chai_1.expect)("tlink1xrr7amq5g80afllmfcud59y3w60q58llx2zpe9").to.equal(eventTokenBurned.fromAddress);
        (0, chai_1.expect)(0).to.equal(eventTokenBurned.msgIndex);
        (0, chai_1.expect)("EventTokenBurned").to.equal(eventTokenBurned.eventName);
    });
    (0, mocha_1.it)("with serviceTokenBurnFromTxResult", () => {
        let inputTxResultResponse = test_data_1.serviceTokenBurnFromTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventTokenBurned.name).to.equal(event.constructor.name);
        let eventTokenBurned = event;
        (0, chai_1.expect)(0).to.equal(eventTokenBurned.msgIndex);
        (0, chai_1.expect)("678c146a").to.equal(eventTokenBurned.contractId);
        (0, chai_1.expect)("1").to.equal(eventTokenBurned.amount);
        (0, chai_1.expect)("link16mk739rd3r3q8a8dw7zr3h50xunxcq0wp80gtu").to.equal(eventTokenBurned.fromAddress);
        (0, chai_1.expect)("link17gx76scz3pe7gtqq8rmf46favtmxn3sgs6qa49").to.equal(eventTokenBurned.proxyAddress);
        (0, chai_1.expect)("EventTokenBurned").to.equal(eventTokenBurned.eventName);
    });
    (0, mocha_1.it)("with serviceTokenModifyTxResult", () => {
        let inputTxResultResponse = test_data_1.serviceTokenModifyTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventTokenModified.name).to.equal(event.constructor.name);
        let eventTokenModified = event;
        (0, chai_1.expect)(0).to.equal(eventTokenModified.msgIndex);
        (0, chai_1.expect)("9636a07e").to.equal(eventTokenModified.contractId);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventTokenModified.modifierAddress);
        (0, chai_1.expect)(new tx_core_models_1.TokenAttribute("name", "STname")).to.deep.equal(lodash_1.default.find(Array.from(eventTokenModified.tokenAttributes), it => {
            return it.key === "name";
        }));
        (0, chai_1.expect)(new tx_core_models_1.TokenAttribute("meta", "meta")).to.deep.equal(lodash_1.default.find(Array.from(eventTokenModified.tokenAttributes), it => {
            return it.key === "meta";
        }));
        (0, chai_1.expect)("EventTokenModified").to.equal(eventTokenModified.eventName);
    });
    (0, mocha_1.it)("with serviceTokenTransferTxResult", () => {
        let inputTxResultResponse = test_data_1.serviceTokenTransferTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventTokenTransferred.name).to.equal(event.constructor.name);
        let eventTokenTransferred = event;
        (0, chai_1.expect)(0).to.equal(eventTokenTransferred.msgIndex);
        (0, chai_1.expect)("9636a07e").to.equal(eventTokenTransferred.contractId);
        (0, chai_1.expect)("1000").to.equal(eventTokenTransferred.amount);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventTokenTransferred.fromAddress);
        (0, chai_1.expect)("tlink1nf5uhdmtsshmkqvlmq45kn4q9atnkx4l3u4rww").to.equal(eventTokenTransferred.toAddress);
        (0, chai_1.expect)(0).to.equal(eventTokenTransferred.msgIndex);
        (0, chai_1.expect)("EventTokenTransferred").to.equal(eventTokenTransferred.eventName);
    });
    (0, mocha_1.it)("with serviceTokenTransferFromTxResult", () => {
        let inputTxResultResponse = test_data_1.serviceTokenTransferFromTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventTokenTransferred.name).to.equal(event.constructor.name);
        let eventTokenTransferred = event;
        (0, chai_1.expect)(0).to.equal(eventTokenTransferred.msgIndex);
        (0, chai_1.expect)("9be17165").to.equal(eventTokenTransferred.contractId);
        (0, chai_1.expect)("1").to.equal(eventTokenTransferred.amount);
        (0, chai_1.expect)("tlink149nz34tch6wc5xslljt0q2j8rfnxg27dxrneyd").to.equal(eventTokenTransferred.fromAddress);
        (0, chai_1.expect)("tlink1r3nl5pm7a8effx39hvac09uxz8eay8jlhyj3us").to.equal(eventTokenTransferred.toAddress);
        (0, chai_1.expect)("tlink1xrr7amq5g80afllmfcud59y3w60q58llx2zpe9").to.equal(eventTokenTransferred.proxyAddress);
        (0, chai_1.expect)(0).to.equal(eventTokenTransferred.msgIndex);
        (0, chai_1.expect)("EventTokenTransferred").to.equal(eventTokenTransferred.eventName);
    });
    (0, mocha_1.it)("with serviceTokenProxyApprovedTxResult", () => {
        let inputTxResultResponse = test_data_1.serviceTokenProxyApprovedTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventTokenProxyApproved.name).to.equal(event.constructor.name);
        let eventTokenProxyApproved = event;
        (0, chai_1.expect)(0).to.equal(eventTokenProxyApproved.msgIndex);
        (0, chai_1.expect)("f38bb8a6").to.equal(eventTokenProxyApproved.contractId);
        (0, chai_1.expect)("link1j8jd9nps56txm2w3afcjsktrrjh0ft82eftchd").to.equal(eventTokenProxyApproved.approverAddress);
        (0, chai_1.expect)("link1he0tp59u36mdjaw560gh8c27pz8fqms88l8nhu").to.equal(eventTokenProxyApproved.proxyAddress);
        (0, chai_1.expect)(0).to.equal(eventTokenProxyApproved.msgIndex);
        (0, chai_1.expect)("EventTokenProxyApproved").to.equal(eventTokenProxyApproved.eventName);
    });
    // collection
    (0, mocha_1.it)("with itemTokenCreateTxResult", () => {
        let inputTxResultResponse = test_data_1.itemTokenCreateTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionCreated.name).to.equal(event.constructor.name);
        let eventTokenProxyApproved = event;
        (0, chai_1.expect)(0).to.equal(eventTokenProxyApproved.msgIndex);
        (0, chai_1.expect)("fee15a74").to.equal(eventTokenProxyApproved.contractId);
        (0, chai_1.expect)("BW Card").to.equal(eventTokenProxyApproved.name);
        (0, chai_1.expect)("link17k4j8nfr47urlzfz6h7hzdaankpkz0dgce0xkz").to.equal(eventTokenProxyApproved.creatorAddress);
        (0, chai_1.expect)("EventCollectionCreated").to.equal(eventTokenProxyApproved.eventName);
    });
    (0, mocha_1.it)("with issueFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.issueFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionFtIssued.name).to.equal(event.constructor.name);
        let eventCollectionFtIssued = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionFtIssued.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionFtIssued.contractId);
        (0, chai_1.expect)("FungibleName").to.equal(eventCollectionFtIssued.name);
        (0, chai_1.expect)(0).to.equal(eventCollectionFtIssued.decimals);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionFtIssued.issuerAddress);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionFtIssued.receiverAddress);
        (0, chai_1.expect)("00000031").to.equal(eventCollectionFtIssued.tokenType);
        (0, chai_1.expect)("EventCollectionFtIssued").to.equal(eventCollectionFtIssued.eventName);
    });
    (0, mocha_1.it)("with issueNonFungibleTypeTxResult", () => {
        let inputTxResultResponse = test_data_1.issueNonFungibleTypeTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionNftIssued.name).to.equal(event.constructor.name);
        let eventCollectionNftIssued = event;
        (0, chai_1.expect)(0, eventCollectionNftIssued.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionNftIssued.contractId);
        (0, chai_1.expect)("1000000c").to.equal(eventCollectionNftIssued.tokenType);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionNftIssued.issuerAddress);
        (0, chai_1.expect)("EventCollectionNftIssued").to.equal(eventCollectionNftIssued.eventName);
    });
    (0, mocha_1.it)("with mintFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.mintFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionFtMinted.name).to.equal(event.constructor.name);
        let eventCollectionFtMinted = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionFtMinted.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionFtMinted.contractId);
        (0, chai_1.expect)("0000000100000000").to.equal(eventCollectionFtMinted.tokenId);
        (0, chai_1.expect)("3000").to.equal(eventCollectionFtMinted.amount);
        (0, chai_1.expect)("tlink1fjx6drmlf9wjjtpk3pkr6zcdl8h8a4aur3wc6j").to.equal(eventCollectionFtMinted.toAddress);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionFtMinted.minterAddress);
        (0, chai_1.expect)("EventCollectionFtMinted").to.equal(eventCollectionFtMinted.eventName);
    });
    (0, mocha_1.it)("with mintNonFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.mintNonFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionNftMinted.name).to.equal(event.constructor.name);
        let eventCollectionNftMinted = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionNftMinted.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionNftMinted.contractId);
        (0, chai_1.expect)(new Set(["1000000100000007"])).to.deep.equals(eventCollectionNftMinted.tokenIds);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionNftMinted.minterAddress);
        (0, chai_1.expect)("tlink12v6t8c3reucj3ahfvx9tvghpltwchh7uvj5frl").to.equal(eventCollectionNftMinted.toAddress);
        (0, chai_1.expect)("EventCollectionNftMinted").to.equal(eventCollectionNftMinted.eventName);
    });
    (0, mocha_1.it)("with burnFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.burnFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionFtBurned.name).to.equal(event.constructor.name);
        let eventCollectionFtBurned = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionFtBurned.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionFtBurned.contractId);
        (0, chai_1.expect)("1").to.equal(eventCollectionFtBurned.amount);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionFtBurned.fromAddress);
        (0, chai_1.expect)("EventCollectionFtBurned").to.equal(eventCollectionFtBurned.eventName);
    });
    (0, mocha_1.it)("with burnFromFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.burnFromFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionFtBurned.name).to.equal(event.constructor.name);
        let eventCollectionFtBurned = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionFtBurned.msgIndex);
        (0, chai_1.expect)("2d8be688").to.equal(eventCollectionFtBurned.contractId);
        (0, chai_1.expect)("00000001").to.equal(eventCollectionFtBurned.tokenType);
        (0, chai_1.expect)("500").to.equal(eventCollectionFtBurned.amount);
        (0, chai_1.expect)("link1yhjrm7zxn97eu5tnz76j32r76sfq02mtmjttuq").to.equal(eventCollectionFtBurned.fromAddress);
        (0, chai_1.expect)("link1z9x3cnadjdvxlrlyl9myrau2uxqrpd0hfwslu4").to.equal(eventCollectionFtBurned.proxyAddress);
        (0, chai_1.expect)("EventCollectionFtBurned").to.equal(eventCollectionFtBurned.eventName);
    });
    (0, mocha_1.it)("with burnNonFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.burnNonFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionNftBurned.name).to.equal(event.constructor.name);
        let eventCollectionNftBurned = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionNftBurned.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionNftBurned.contractId);
        (0, chai_1.expect)(new Set(["1000000100000003"])).to.deep.equal(eventCollectionNftBurned.tokenIds);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionNftBurned.fromAddress);
        (0, chai_1.expect)("EventCollectionNftBurned").to.equal(eventCollectionNftBurned.eventName);
    });
    (0, mocha_1.it)("with burnFromNonFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.burnFromNonFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionNftBurned.name).to.equal(event.constructor.name);
        let eventCollectionNftBurned = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionNftBurned.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionNftBurned.contractId);
        (0, chai_1.expect)(new Set(["1000000100000005"])).to.deep.equal(eventCollectionNftBurned.tokenIds);
        (0, chai_1.expect)("tlink17dz3hqn6nd5j6euymaw3ft9phgspmuhfjqazph").to.equal(eventCollectionNftBurned.fromAddress);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionNftBurned.proxyAddress);
        (0, chai_1.expect)("EventCollectionNftBurned").to.equal(eventCollectionNftBurned.eventName);
    });
    (0, mocha_1.it)("with nonFungibleTokenTypeModifyTxResult", () => {
        let inputTxResultResponse = test_data_1.nonFungibleTokenTypeModifyTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionNftTypeModified.name).to.equal(event.constructor.name);
        let eventCollectionNftTypeModified = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionNftTypeModified.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionNftTypeModified.contractId);
        (0, chai_1.expect)("10000001").to.equal(eventCollectionNftTypeModified.tokenType);
        (0, chai_1.expect)(new tx_core_models_1.CollectionAttribute("name", "NFT Name")).to.deep.equals(lodash_1.default.find(Array.from(eventCollectionNftTypeModified.tokenAttributes), it => {
            return it.key === "name";
        }));
        (0, chai_1.expect)(new tx_core_models_1.CollectionAttribute("meta", "NFT meta")).to.deep.equals(lodash_1.default.find(Array.from(eventCollectionNftTypeModified.tokenAttributes), it => {
            return it.key === "meta";
        }));
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionNftTypeModified.modifierAddress);
        (0, chai_1.expect)("EventCollectionNftTypeModified").to.equal(eventCollectionNftTypeModified.eventName);
    });
    (0, mocha_1.it)("with nftUpdateTxResultResponse", () => {
        let inputTxResultResponse = test_data_1.nftUpdateTxResultResponse;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionNftModified.name).to.equal(event.constructor.name);
        let eventCollectionNftModified = event;
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionNftModified.contractId);
        (0, chai_1.expect)("1000000100000001").to.equal(eventCollectionNftModified.tokenId);
        (0, chai_1.expect)(new tx_core_models_1.CollectionAttribute("name", "NFT index name")).to.deep.equals(lodash_1.default.find(Array.from(eventCollectionNftModified.tokenAttributes), it => {
            return it.key === "name";
        }));
        (0, chai_1.expect)(new tx_core_models_1.CollectionAttribute("meta", "NFT index meta")).to.deep.equals(lodash_1.default.find(Array.from(eventCollectionNftModified.tokenAttributes), it => {
            return it.key === "meta";
        }));
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionNftModified.modifierAddress);
        (0, chai_1.expect)(0).to.equal(eventCollectionNftModified.msgIndex);
        (0, chai_1.expect)("EventCollectionNftModified").to.equal(eventCollectionNftModified.eventName);
    });
    (0, mocha_1.it)("with fungibleTokenTransferTxResult", () => {
        let inputTxResultResponse = test_data_1.fungibleTokenTransferTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionFtTransferred.name).to.equal(event.constructor.name);
        let eventCollectionFtTransferred = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionFtTransferred.msgIndex);
        (0, chai_1.expect)("61e14383").to.equal(eventCollectionFtTransferred.contractId);
        (0, chai_1.expect)("00000001").to.equal(eventCollectionFtTransferred.tokenType);
        (0, chai_1.expect)("1").to.equal(eventCollectionFtTransferred.amount);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq").to.equal(eventCollectionFtTransferred.fromAddress);
        (0, chai_1.expect)("tlink1nf5uhdmtsshmkqvlmq45kn4q9atnkx4l3u4rww").to.equal(eventCollectionFtTransferred.toAddress);
        (0, chai_1.expect)("EventCollectionFtTransferred").to.equal(eventCollectionFtTransferred.eventName);
    });
    (0, mocha_1.it)("with fungibleTokenTransferFromTxResult", () => {
        let inputTxResultResponse = test_data_1.fungibleTokenTransferFromTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let event = actual.values().next().value;
        (0, chai_1.expect)(tx_core_models_1.EventCollectionFtTransferred.name).to.equal(event.constructor.name);
        let eventCollectionFtTransferred = event;
        (0, chai_1.expect)(0).to.equal(eventCollectionFtTransferred.msgIndex);
        (0, chai_1.expect)("bf365bab").to.equal(eventCollectionFtTransferred.contractId);
        (0, chai_1.expect)("00000001").to.equal(eventCollectionFtTransferred.tokenType);
        (0, chai_1.expect)("50").to.equal(eventCollectionFtTransferred.amount);
        (0, chai_1.expect)("link1j8jd9nps56txm2w3afcjsktrrjh0ft82eftchd").to.equal(eventCollectionFtTransferred.fromAddress);
        (0, chai_1.expect)("link137pmnn2snxdcwa5kmg5rra6u3tf2y5c7emmm7p").to.equal(eventCollectionFtTransferred.toAddress);
        (0, chai_1.expect)("link1he0tp59u36mdjaw560gh8c27pz8fqms88l8nhu").to.equal(eventCollectionFtTransferred.proxyAddress);
        (0, chai_1.expect)("EventCollectionFtTransferred").to.equal(eventCollectionFtTransferred.eventName);
    });
    (0, mocha_1.it)("with transferNonFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.transferNonFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(2).to.equal(actual.size);
        let eventCollectionNftTransferred = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftTransferred";
        });
        (0, chai_1.expect)("803820e6", eventCollectionNftTransferred.contractId);
        (0, chai_1.expect)(new Set(["1000000100000004", "1000000100000006"])).to.deep.equal(eventCollectionNftTransferred.tokenIds);
        (0, chai_1.expect)("tlink1uly93jzy4qlpf6k803uz4tke6auwl3ukhns90t").to.equal(eventCollectionNftTransferred.fromAddress);
        (0, chai_1.expect)("tlink1nq492tmyhcdz5dp52r7hht6f3w9f3m5wwxwyxv").to.equal(eventCollectionNftTransferred.toAddress);
        (0, chai_1.expect)(0).to.equal(eventCollectionNftTransferred.msgIndex);
        (0, chai_1.expect)("EventCollectionNftTransferred", eventCollectionNftTransferred.eventName);
        let eventCollectionNftHolderChanged = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftHolderChanged";
        });
        (0, chai_1.expect)("803820e6").to.equal(eventCollectionNftHolderChanged.contractId);
        (0, chai_1.expect)(new Set(["1000000100000004", "1000000100000006"])).to.deep.equal(eventCollectionNftHolderChanged.tokenIds);
        (0, chai_1.expect)("tlink1uly93jzy4qlpf6k803uz4tke6auwl3ukhns90t").to.equal(eventCollectionNftHolderChanged.fromAddress);
        (0, chai_1.expect)("tlink1nq492tmyhcdz5dp52r7hht6f3w9f3m5wwxwyxv").to.equal(eventCollectionNftHolderChanged.toAddress);
        (0, chai_1.expect)(0).to.equal(eventCollectionNftHolderChanged.msgIndex);
        (0, chai_1.expect)("EventCollectionNftHolderChanged").to.equal(eventCollectionNftHolderChanged.eventName);
    });
    (0, mocha_1.it)("with transferFromNonFungibleTxResult", () => {
        let inputTxResultResponse = test_data_1.transferFromNonFungibleTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(2).to.equal(actual.size);
        let eventCollectionNftTransferred = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftTransferred";
        });
        (0, chai_1.expect)("bf365bab", eventCollectionNftTransferred.contractId);
        (0, chai_1.expect)(new Set(["100000010000000e", "100000010000000f"])).to.deep.equal(eventCollectionNftTransferred.tokenIds);
        (0, chai_1.expect)("link1j8jd9nps56txm2w3afcjsktrrjh0ft82eftchd").to.equal(eventCollectionNftTransferred.fromAddress);
        (0, chai_1.expect)("link137pmnn2snxdcwa5kmg5rra6u3tf2y5c7emmm7p").to.equal(eventCollectionNftTransferred.toAddress);
        (0, chai_1.expect)("link1he0tp59u36mdjaw560gh8c27pz8fqms88l8nhu").to.equal(eventCollectionNftTransferred.proxyAddress);
        (0, chai_1.expect)(0).to.equal(eventCollectionNftTransferred.msgIndex);
        (0, chai_1.expect)("EventCollectionNftTransferred", eventCollectionNftTransferred.eventName);
        let eventCollectionNftHolderChanged = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftHolderChanged";
        });
        (0, chai_1.expect)("bf365bab").to.equal(eventCollectionNftHolderChanged.contractId);
        (0, chai_1.expect)(new Set(["100000010000000e", "100000010000000f"])).to.deep.equal(eventCollectionNftHolderChanged.tokenIds);
        (0, chai_1.expect)("link1j8jd9nps56txm2w3afcjsktrrjh0ft82eftchd").to.equal(eventCollectionNftHolderChanged.fromAddress);
        (0, chai_1.expect)("link137pmnn2snxdcwa5kmg5rra6u3tf2y5c7emmm7p").to.equal(eventCollectionNftHolderChanged.toAddress);
        (0, chai_1.expect)(0).to.equal(eventCollectionNftHolderChanged.msgIndex);
        (0, chai_1.expect)("EventCollectionNftHolderChanged").to.equal(eventCollectionNftHolderChanged.eventName);
    });
    (0, mocha_1.it)("with attachNFTTxResult", () => {
        let inputTxResultResponse = test_data_1.attachNFTTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(2).to.equal(actual.size);
        let eventCollectionNftAttached = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftAttached";
        });
        (0, chai_1.expect)("61e14383", eventCollectionNftAttached.contractId);
        (0, chai_1.expect)("100000080000000e", eventCollectionNftAttached.parentTokenId);
        (0, chai_1.expect)("100000080000000f", eventCollectionNftAttached.childTokenId);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq", eventCollectionNftAttached.holderAddress);
        (0, chai_1.expect)(0, eventCollectionNftAttached.msgIndex);
        (0, chai_1.expect)("EventCollectionNftAttached", eventCollectionNftAttached.eventName);
        let eventCollectionNftRootChanged = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftRootChanged";
        });
        (0, chai_1.expect)("61e14383", eventCollectionNftRootChanged.contractId);
        (0, chai_1.expect)(1, eventCollectionNftRootChanged.tokenIds.size);
        (0, chai_1.expect)(new Array(["100000080000000e"]), eventCollectionNftRootChanged.tokenIds);
        (0, chai_1.expect)("100000080000000e", eventCollectionNftRootChanged.oldRootTokenId);
        (0, chai_1.expect)("100000080000000f", eventCollectionNftRootChanged.newRootTokenId);
        (0, chai_1.expect)(0, eventCollectionNftRootChanged.msgIndex);
        (0, chai_1.expect)("EventCollectionNftRootChanged", eventCollectionNftRootChanged.eventName);
    });
    (0, mocha_1.it)("with attachFromNFTTxResult", () => {
        let inputTxResultResponse = test_data_1.attachFromNFTTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(2).to.equal(actual.size);
        let eventCollectionNftAttached = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftAttached";
        });
        (0, chai_1.expect)(0, eventCollectionNftAttached.msgIndex);
        (0, chai_1.expect)("61e14383", eventCollectionNftAttached.contractId);
        (0, chai_1.expect)("100000010000000b", eventCollectionNftAttached.parentTokenId);
        (0, chai_1.expect)("100000010000000c", eventCollectionNftAttached.childTokenId);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq", eventCollectionNftAttached.holderAddress);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq", eventCollectionNftAttached.proxyAddress);
        (0, chai_1.expect)("EventCollectionNftAttached", eventCollectionNftAttached.eventName);
        let eventCollectionNftRootChanged = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftRootChanged";
        });
        (0, chai_1.expect)("61e14383", eventCollectionNftRootChanged.contractId);
        (0, chai_1.expect)(1, eventCollectionNftRootChanged.tokenIds.size);
        (0, chai_1.expect)(new Array(["100000010000000b"]), eventCollectionNftRootChanged.tokenIds);
        (0, chai_1.expect)("100000010000000b", eventCollectionNftRootChanged.oldRootTokenId);
        (0, chai_1.expect)("100000010000000c", eventCollectionNftRootChanged.newRootTokenId);
        (0, chai_1.expect)(0, eventCollectionNftRootChanged.msgIndex);
        (0, chai_1.expect)("EventCollectionNftRootChanged", eventCollectionNftRootChanged.eventName);
    });
    (0, mocha_1.it)("with detachNFTTxResult", () => {
        let inputTxResultResponse = test_data_1.detachNFTTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(2).to.equal(actual.size);
        let eventCollectionNftDetached = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftDetached";
        });
        (0, chai_1.expect)(0, eventCollectionNftDetached.msgIndex);
        (0, chai_1.expect)("61e14383", eventCollectionNftDetached.contractId);
        (0, chai_1.expect)("100000080000000f", eventCollectionNftDetached.exParentTokenId);
        (0, chai_1.expect)("100000080000000e", eventCollectionNftDetached.exChildTokenId);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq", eventCollectionNftDetached.holderAddress);
        (0, chai_1.expect)("EventCollectionNftDetached", eventCollectionNftDetached.eventName);
        let eventCollectionNftRootChanged = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftRootChanged";
        });
        (0, chai_1.expect)(0, eventCollectionNftRootChanged.msgIndex);
        (0, chai_1.expect)("61e14383", eventCollectionNftRootChanged.contractId);
        (0, chai_1.expect)(1, eventCollectionNftRootChanged.tokenIds.size);
        (0, chai_1.expect)(new Array(["100000080000000e"]), eventCollectionNftRootChanged.tokenIds);
        (0, chai_1.expect)("100000080000000f", eventCollectionNftRootChanged.oldRootTokenId);
        (0, chai_1.expect)("100000080000000e", eventCollectionNftRootChanged.newRootTokenId);
        (0, chai_1.expect)("EventCollectionNftRootChanged", eventCollectionNftRootChanged.eventName);
    });
    (0, mocha_1.it)("with detachNFTFromTxResult", () => {
        let inputTxResultResponse = test_data_1.detachNFTFromTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(2).to.equal(actual.size);
        let eventCollectionNftDetached = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftDetached";
        });
        (0, chai_1.expect)(0, eventCollectionNftDetached.msgIndex);
        (0, chai_1.expect)("61e14383", eventCollectionNftDetached.contractId);
        (0, chai_1.expect)("100000080000000c", eventCollectionNftDetached.exParentTokenId);
        (0, chai_1.expect)("100000080000000b", eventCollectionNftDetached.exChildTokenId);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq", eventCollectionNftDetached.holderAddress);
        (0, chai_1.expect)("tlink1fr9mpexk5yq3hu6jc0npajfsa0x7tl427fuveq", eventCollectionNftDetached.proxyAddress);
        (0, chai_1.expect)("EventCollectionNftDetached", eventCollectionNftDetached.eventName);
        let eventCollectionNftRootChanged = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionNftRootChanged";
        });
        (0, chai_1.expect)(0, eventCollectionNftRootChanged.msgIndex);
        (0, chai_1.expect)("61e14383", eventCollectionNftRootChanged.contractId);
        (0, chai_1.expect)(1, eventCollectionNftRootChanged.tokenIds.size);
        (0, chai_1.expect)(new Array(["100000010000000b"]), eventCollectionNftRootChanged.tokenIds);
        (0, chai_1.expect)("100000080000000c", eventCollectionNftRootChanged.oldRootTokenId);
        (0, chai_1.expect)("100000080000000b", eventCollectionNftRootChanged.newRootTokenId);
        (0, chai_1.expect)("EventCollectionNftRootChanged", eventCollectionNftRootChanged.eventName);
    });
    (0, mocha_1.it)("with itemTokenApproveTxResult", () => {
        let inputTxResultResponse = test_data_1.itemTokenApproveTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let eventCollectionProxyApproved = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionProxyApproved";
        });
        (0, chai_1.expect)(0).to.equal(eventCollectionProxyApproved.msgIndex);
        (0, chai_1.expect)("fee15a74").to.equal(eventCollectionProxyApproved.contractId);
        (0, chai_1.expect)("link1ygceu3trpkkz9gcyr7m3zzv8n82zd3fawea59p").to.equal(eventCollectionProxyApproved.approverAddress);
        (0, chai_1.expect)("link17k4j8nfr47urlzfz6h7hzdaankpkz0dgce0xkz").to.equal(eventCollectionProxyApproved.proxyAddress);
        (0, chai_1.expect)("EventCollectionProxyApproved").to.equal(eventCollectionProxyApproved.eventName);
    });
    (0, mocha_1.it)("with itemTokenDisapproveTxResult", () => {
        let inputTxResultResponse = test_data_1.itemTokenDisapproveTxResult;
        let rawTransactionResult = new tx_result_adapters_1.RawTransactionResultAdapter().adapt(inputTxResultResponse);
        (0, chai_1.expect)(inputTxResultResponse.height).to.equal(rawTransactionResult.height);
        let actual = adapter.adapt(rawTransactionResult);
        (0, chai_1.expect)(1).to.equal(actual.size);
        let eventCollectionProxyDisapproved = lodash_1.default.find(Array.from(actual), it => {
            return it.eventName === "EventCollectionProxyDisapproved";
        });
        (0, chai_1.expect)(0).to.equal(eventCollectionProxyDisapproved.msgIndex);
        (0, chai_1.expect)("bf365bab").to.equal(eventCollectionProxyDisapproved.contractId);
        (0, chai_1.expect)("link1j8jd9nps56txm2w3afcjsktrrjh0ft82eftchd").to.equal(eventCollectionProxyDisapproved.approverAddress);
        (0, chai_1.expect)("link1he0tp59u36mdjaw560gh8c27pz8fqms88l8nhu").to.equal(eventCollectionProxyDisapproved.proxyAddress);
        (0, chai_1.expect)("EventCollectionProxyDisapproved").to.equal(eventCollectionProxyDisapproved.eventName);
    });
});
